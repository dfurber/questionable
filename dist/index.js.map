{"version":3,"file":"index.js","sources":["../node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","../node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","../node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","../node_modules/@babel/runtime/helpers/esm/classCallCheck.js","../node_modules/@babel/runtime/helpers/esm/defineProperty.js","../src/lib/enums.ts","../src/composable/Answer.ts","../src/state/GlobalState.tsx","../src/state/stepReducer.ts","../src/lib/date.ts","../node_modules/@babel/runtime/helpers/esm/createClass.js","../src/lib/defaultPages.ts","../src/lib/log.ts","../src/lib/noop.tsx","../src/components/lib/Wizard.tsx","../src/components/wizard/DevPanel.tsx","../src/components/wizard/ProgressBar.tsx","../src/components/wizard/StepIndicator.tsx","../src/components/factories/ProgressFactory.tsx","../src/schema/index.ts","../src/schema/editStepSchema.ts","../src/components/lib/Pages.tsx","../src/components/lib/Steps.tsx","../src/components/lib/Questions.tsx","../src/components/wizard/Button.tsx","../src/components/wizard/NavBar.tsx","../src/components/wizard/DesignLayout.tsx","../src/components/design/Edit.tsx","../src/components/wizard/StepLayout.tsx","../src/components/pages/LandingPage.tsx","../src/components/pages/NoResultsPage.tsx","../src/components/pages/ResultsPage.tsx","../src/components/pages/SummaryPage.tsx","../src/components/questions/DateOfBirth.tsx","../src/components/questions/MultiSelect.tsx","../src/components/questions/MultipleChoice.tsx","../src/components/factories/QuestionFactory.tsx","../src/components/factories/StepFactory.tsx","../src/components/factories/PageFactory.tsx","../src/components/factories/DesignFactory.tsx","../src/components/Questionable.tsx"],"sourcesContent":["export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}","import arrayWithHoles from \"./arrayWithHoles.js\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableRest from \"./nonIterableRest.js\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  var _i = arr && (typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]);\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","export default function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","/**\n * Defines the known component types for questions\n */\nexport enum QUESTION_TYPE {\n  DOB = 'dob',\n  MULTIPLE_CHOICE = 'multiple_choice',\n  MULTIPLE_SELECT = 'multiple_select',\n}\n\n/**\n * Defines the known component types for pages\n */\nexport enum PAGE_TYPE {\n  LANDING = 'Landing',\n  NO_RESULTS = 'No Results',\n  RESULTS = 'Results',\n  SUMMARY = 'Summary',\n}\n\n/**\n * Defines the known component types for design\n */\nexport enum DESIGN_TYPE {\n  EDIT = 'Edit',\n}\n\n/**\n * Defines the type of step for UI rendering\n */\nexport const STEP_TYPE = { ...PAGE_TYPE, ...QUESTION_TYPE, ...DESIGN_TYPE };\nexport type TStepType = PAGE_TYPE | QUESTION_TYPE | DESIGN_TYPE;\n\n/**\n * Navigation direction for steps by array index (+1 or -1)\n */\nexport enum DIRECTION {\n  FORWARD = 1,\n  BACKWARD = -1,\n}\n\n/**\n * Progress Bar status\n */\nexport enum PROGRESS_BAR_STATUS {\n  COMPLETE = 'complete',\n  CURRENT = 'current',\n  INCOMPLETE = 'incomplete',\n}\n\nexport enum ACTION {\n  CALL = 'call',\n  HYBRID = 'hybrid',\n  ONLINE = 'online',\n}\n\nexport enum ACTION_TYPE {\n  RESET = 'RESET',\n  UPDATE = 'UPDATE',\n}\n\nexport enum DATE_UNIT {\n  DAY = 'day',\n  MONTH = 'month',\n  YEAR = 'year',\n}\n\nexport enum MODE {\n  DEV = 'dev',\n  EDIT = 'edit',\n  VIEW = 'view',\n}\n\nexport enum CSS_CLASS {\n  BASE = 'usds-q',\n  DEV_PANEL_SECTION = 'usds-q-dev-panel',\n  DOB = 'usds-q-dob',\n  MULTI_CHOICE = 'usds-q-multi-choice',\n  MULTI_CHOICE_GROUP = 'usds-q-multi-choice-group',\n  MULTI_SELECT = 'usds-q-multi-select',\n  MULTI_SELECT_GROUP = 'usds-q-multi-select-group',\n  NAVBAR = 'usds-q-navbar',\n  NAVBAR_BUTTON = 'usds-q-navbar-button',\n  PROGRESS_BAR = 'usds-q-progress-bar',\n  PROGRESS_BAR_BOTTOM_SECTION = 'usds-q-progress-bar-bottom-section',\n  PROGRESS_BAR_TOP_SECTION = 'usds-q-progress-bar-top-section',\n  RESULTS_SUMMARY_BOX = 'usds-q-results-summary-box',\n  RESULTS_SUMMARY_HEADER = 'usds-q-results-summary-header',\n  STEP_FOOTER = 'usds-q-step-footer',\n  STEP_HEADER = 'usds-q-step-header',\n  STEP_INFO = 'usds-q-step-info',\n  STEP_LAYOUT = 'usds-q-step-layout',\n  STEP_LAYOUT_SECTION = 'usds-q-step-layout-section',\n  STEP_SUBTITLE = 'usds-q-step-subtitle',\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport const isEnum = (enm: object, value: string): boolean =>\n  Object.values(enm).includes(value);\n","import { TAge }      from '../lib/types';\nimport { IForm }     from '../survey/IForm';\nimport { IQuestion } from '../survey/IStep';\n\nexport class Answer implements IForm {\n  public readonly started: Date;\n\n  finished?: Date;\n\n  public birthdate?: string;\n\n  public age?: TAge;\n\n  public responses: IQuestion[] = [];\n\n  constructor(form: Partial<Answer> = {}) {\n    Object.assign(this, form);\n    this.started = new Date();\n  }\n}\n","import React, {\n  createContext,\n  Dispatch,\n  SetStateAction,\n  useContext,\n  useState,\n} from 'react';\nimport { QuestionableConfig } from '../composable/Config';\nimport { Questionnaire }      from '../composable/Questionnaire';\n\nexport interface IQuestionable {\n  config?: QuestionableConfig;\n  questionnaire?: Questionnaire;\n}\n\nconst GlobalStateContext = createContext({\n  setState: {} as Dispatch<SetStateAction<Partial<IQuestionable>>>,\n  state:    {} as Partial<IQuestionable>,\n});\n\ntype TGlobalStateContext = {\n  setState: React.Dispatch<React.SetStateAction<Partial<IQuestionable>>>;\n  state: Partial<IQuestionable>;\n};\n\nconst useGlobalState = (): TGlobalStateContext => {\n  const context = useContext(GlobalStateContext);\n  if (!context) {\n    throw new Error('useGlobalState must be used within a GlobalStateContext');\n  }\n  return context;\n};\n\nexport const GlobalStateProvider = ({\n  children,\n  value = {} as IQuestionable,\n}: {\n  children: React.ReactNode;\n  value?: Partial<IQuestionable>;\n}): JSX.Element => {\n  const [state, setState] = useState(value);\n  return (\n    <GlobalStateContext.Provider value={{ setState, state }}>\n      {children}\n    </GlobalStateContext.Provider>\n  );\n};\n\nconst useQuestionnaire = (): Questionnaire => {\n  const { questionnaire } = useGlobalState().state;\n\n  if (!questionnaire) {\n    throw new Error('useQuestionnaire has no data');\n  }\n  return questionnaire;\n};\n\nconst useConfig = (): QuestionableConfig => {\n  const { config } = useGlobalState().state;\n\n  if (!config) {\n    throw new Error('useConfig has no data');\n  }\n  return config;\n};\n\nexport interface IGlobalState {\n  config: QuestionableConfig;\n  questionnaire: Questionnaire;\n}\n\nexport const useGlobal = (): IGlobalState => ({\n  config:        useConfig(),\n  questionnaire: useQuestionnaire(),\n});\n","import { merge }       from 'lodash';\nimport { ACTION_TYPE } from '../lib/enums';\nimport { IForm }       from '../survey/IForm';\nimport { Answer }      from '../composable/Answer';\n\n/**\n * Merges the form's answer state as the user progresses through the survey\n * @param previousState\n * @param action\n * @returns\n */\nexport const stepReducer = (\n  previousState: IForm,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  action: { type: ACTION_TYPE; value: any },\n): IForm => {\n  // Action should never be null,\n  // except when we attempt to storybook/test individual components in isolation\n  switch (action?.type) {\n    case ACTION_TYPE.RESET:\n      return new Answer();\n\n    case ACTION_TYPE.UPDATE:\n      return merge(\n        {\n          ...previousState,\n        },\n        {\n          ...action.value,\n        },\n      );\n\n    default:\n      return previousState;\n  }\n};\n","import { DateTime } from 'luxon';\nimport { TAge }     from './types';\n\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst moment = require('moment');\n\n/**\n * Determines if a string can be parsed into a valid Date\n * @param dt\n * @returns\n */\nexport const isValidDate = (dt: string | undefined): boolean => {\n  if (!dt || dt.length < 8) return false;\n  if (!moment(dt, 'MM/DD/YYYY', true).isValid()) return false;\n  return true;\n};\n\n/**\n * Gets a luxon DateTime object from a date string\n * @param dt DateTime as string- should always be in the format `MM/DD/YYYY`\n * @returns DateTime or undefined\n */\nexport const getDateTime = (dt: string): DateTime | undefined => {\n  if (!isValidDate(dt)) return undefined;\n  const date = new Date(\n    +dt.substring(6, 10),\n    +dt.substring(0, 2) - 1,\n    +dt.substring(3, 5),\n  );\n  return DateTime.fromJSDate(date);\n};\n\n/**\n * Gets an age from a DateTime object\n * @param dob - luxon DateTime\n * @returns an age with years, months, days\n */\nexport const getDateTimeAge = (dob: DateTime): TAge => {\n  const now = DateTime.now();\n\n  const yearNow  = now.year;\n  const monthNow = now.month;\n  const dateNow  = now.day;\n\n  const yearDob  = dob.year;\n  const monthDob = dob.month;\n  const dateDob  = dob.day;\n\n  let years  = yearNow - yearDob;\n  let months = 0;\n\n  if (monthNow >= monthDob) {\n    months = monthNow - monthDob;\n  } else {\n    years -= 1;\n    months = 12 + monthNow - monthDob;\n  }\n\n  let days = 0;\n  if (dateNow >= dateDob) {\n    days = dateNow - dateDob;\n  } else {\n    // eslint-disable-next-line no-multi-spaces\n    days    = 31 + dateNow - dateDob;\n    months += -1;\n    if (months < 0) {\n      months = 11;\n      years -= 1;\n    }\n  }\n\n  return {\n    days,\n    months,\n    years,\n  };\n};\n\n/**\n * Parses a date/time string and returns an Age object\n * @param dateOfBirth - should always be in the format `MM/DD/YYYY`\n * @returns an age, if the date is valid\n */\nexport const getAge = (dateOfBirth: string | undefined): TAge | undefined => {\n  if (!dateOfBirth || !isValidDate(dateOfBirth)) return undefined;\n\n  const dob = getDateTime(dateOfBirth);\n  if (!dob) return undefined;\n\n  return getDateTimeAge(dob);\n};\n","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nexport default function _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}","import { IPage }     from '../survey/IStep';\nimport { IPages }    from '../survey/IPages';\nimport { PAGE_TYPE } from './enums';\n\n/**\n * Default landing step if none is defined\n */\nconst landingPage: IPage = {\n  buttons: {\n    next: {\n      label: 'Get Started',\n    },\n  },\n  id:      PAGE_TYPE.LANDING,\n  section: { id: PAGE_TYPE.LANDING },\n  title:   PAGE_TYPE.LANDING,\n  type:    PAGE_TYPE.LANDING,\n};\n\n/**\n * Default result step if none is defined\n */\nconst resultsPage: IPage = {\n  id:      PAGE_TYPE.RESULTS,\n  section: { id: PAGE_TYPE.RESULTS },\n  title:   PAGE_TYPE.RESULTS,\n  type:    PAGE_TYPE.RESULTS,\n};\n\n/**\n * Default no results step if none is defined\n */\nconst noResultsPage: IPage = {\n  id:      PAGE_TYPE.NO_RESULTS,\n  section: { id: PAGE_TYPE.RESULTS },\n  title:   PAGE_TYPE.NO_RESULTS,\n  type:    PAGE_TYPE.NO_RESULTS,\n};\n\n/**\n * Default result step if none is defined\n */\nconst summaryPage: IPage = {\n  buttons: {\n    next: {\n      label: 'Submit',\n    },\n  },\n  id:      PAGE_TYPE.SUMMARY,\n  section: { id: PAGE_TYPE.RESULTS },\n  title:   PAGE_TYPE.SUMMARY,\n  type:    PAGE_TYPE.SUMMARY,\n};\n\nexport const DEFAULT_PAGES: IPages = {\n  landingPage,\n  noResultsPage,\n  resultsPage,\n  summaryPage,\n};\n","/*\n  eslint-disable no-console,\n                 @typescript-eslint/no-explicit-any,\n                 @typescript-eslint/explicit-module-boundary-types,\n*/\n\n/**\n * Logs to the console. All arguments logged as an object.\n * @param params\n * @returns\n */\nexport const log = (...params: any) => console.log({ ...params });\n","/* eslint-disable @typescript-eslint/no-empty-function */\nimport { log } from './log';\n\n/**\n * Generic no-operation\n */\nexport const noop = (): void => { };\n\n/**\n * Generic no-element\n * @returns empty element\n */\nexport const noel = (message = '', context = ''): JSX.Element => {\n  if (message || context) {\n    log('Created an empty element', message, context);\n  }\n  return (<>{message}</>);\n};\n","import { SiteAlert }              from '@trussworks/react-uswds';\nimport FileSaver                  from 'file-saver';\nimport { QuestionableConfig }     from '../../composable/Config';\nimport { ACTION_TYPE, CSS_CLASS } from '../../lib/enums';\nimport { noel }                   from '../../lib/noop';\nimport { IStepData }              from '../../survey/IStepData';\n\nexport abstract class Wizard {\n  public static getHeader(\n    props: IStepData,\n    config: QuestionableConfig,\n  ): JSX.Element {\n    let text = props.step?.title;\n    if (!text) {\n      return noel();\n    }\n\n    if (config.steps.showStepId) {\n      text = `${props.step?.id}: ${text}`;\n    }\n    return <h3 className={`usa-card__heading ${CSS_CLASS.STEP_HEADER}`}>{text}</h3>;\n  }\n\n  public static getSubtitle(props: IStepData): JSX.Element {\n    const text = props.step?.subTitle;\n    if (!text) {\n      return noel();\n    }\n    return (\n      <p className={CSS_CLASS.STEP_SUBTITLE} dangerouslySetInnerHTML={{ __html: text }} />\n    );\n  }\n\n  public static getInfoBox(props: IStepData): JSX.Element {\n    const text = props.step?.info;\n    if (!text) {\n      return noel();\n    }\n    return (\n      <SiteAlert variant=\"info\" showIcon={false} className={`outline-1px ${CSS_CLASS.STEP_INFO}`}>\n        {text}\n      </SiteAlert>\n    );\n  }\n\n  public static getFooter(props: IStepData): JSX.Element {\n    const text = props.step?.footer;\n    if (!text) {\n      return noel();\n    }\n    return (\n      <p\n        className={`font-sans-6 ${CSS_CLASS.STEP_FOOTER}`}\n        dangerouslySetInnerHTML={{ __html: text }}\n       />\n    );\n  }\n\n  public static resetQuestionable(props: IStepData): void {\n    props.dispatchForm({\n      type: ACTION_TYPE.RESET,\n    });\n    props.wizard.goToStep('A');\n  }\n\n  // eslint-disable-next-line max-len\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types, @typescript-eslint/no-explicit-any\n  public static saveAsJson(data: any, fileName = 'questionable.json'): void {\n    const blob = new Blob([data], { type: 'text/plain;charset=utf-8' });\n    FileSaver.saveAs(blob, fileName);\n  }\n}\n","import { Accordion, Button } from '@trussworks/react-uswds';\nimport { CSS_CLASS }         from '../../lib';\nimport { noel }              from '../../lib/noop';\nimport { useGlobal }         from '../../state/GlobalState';\nimport { IStepData }         from '../../survey/IStepData';\nimport { Wizard }            from '../lib/Wizard';\n\nexport const DevPanel = (props: IStepData): JSX.Element => {\n  const { config } = useGlobal();\n\n  if (!config.dev) {\n    return noel();\n  }\n\n  const reset = () => Wizard.resetQuestionable(props);\n\n  return (\n    <>\n      <Accordion\n        items={[\n          {\n            content: (\n              <pre>\n                <code>{JSON.stringify(props.form, null, 4)}</code>\n              </pre>\n            ),\n            expanded: false,\n            id:       'developer-output',\n            title:    'Temporary developer panel',\n          },\n        ]}\n      />\n      <br></br>\n      <nav className={CSS_CLASS.NAVBAR}>\n        <Button type=\"reset\" secondary onClick={reset}>\n          Reset\n        </Button>\n      </nav>\n    </>\n  );\n};\n","import PB            from '@ramonak/react-progress-bar';\nimport { useGlobal } from '../../state/GlobalState';\nimport { IStepData } from '../../survey/IStepData';\nimport { noel }      from '../../lib/noop';\nimport { CSS_CLASS } from '../../lib';\n\nexport const ProgressBar = (props: IStepData): JSX.Element => {\n  const { config, questionnaire } = useGlobal();\n\n  if (config.progressBar.hide) {\n    return noel();\n  }\n\n  const completed = questionnaire.getProgressPercent(props, config);\n\n  return (\n    <div className={CSS_CLASS.PROGRESS_BAR}>\n      <PB\n        completed={completed}\n        bgColor={config.progressBar.bgColor}\n        baseBgColor={config.progressBar.baseBgColor}\n        isLabelVisible={false}\n        borderRadius={'0px'}\n      />\n    </div>\n  );\n};\n","import { StepIndicator as SI, StepIndicatorStep } from '@trussworks/react-uswds';\nimport { useGlobal }                              from '../../state/GlobalState';\nimport { IStepData }                              from '../../survey/IStepData';\nimport { ISection }                               from '../../survey/IStep';\nimport { noel }                                   from '../../lib/noop';\n\nconst getIndicatorStep = (s: ISection) => (\n    <StepIndicatorStep key={s.id} label={s.name} status={s.status || 'incomplete'} />\n);\n\nexport const StepIndicator = (props: IStepData): JSX.Element => {\n  const { config, questionnaire } = useGlobal();\n\n  if (config.progressBar.hide) {\n    return noel();\n  }\n\n  const sections = questionnaire.getSections(props, config);\n  if (sections.length === 0) {\n    return noel();\n  }\n\n  return (\n    <SI centered counters=\"small\">\n      {sections.map(getIndicatorStep)}\n    </SI>\n  );\n};\n","import { ProgressBar }       from '../wizard/ProgressBar';\nimport { StepIndicator }     from '../wizard/StepIndicator';\nimport { noel }              from '../../lib/noop';\nimport { useGlobal }         from '../../state/GlobalState';\nimport { IStepData }         from '../../survey/IStepData';\nimport { TVerticalPosition } from '../../lib/types';\n\nexport const ProgressFactory = ({ props, position }:\n  { position: TVerticalPosition, props: IStepData }): JSX.Element => {\n  const { config } = useGlobal();\n\n  if (config.progressBar.hide || config.progressBar.position !== position) {\n    return noel();\n  }\n  switch (config.progressBar.type) {\n    case 'progress-bar':\n      return <ProgressBar {...props}/>;\n    case 'step-indicator':\n      return <StepIndicator {...props} />;\n    default:\n      return noel('Could not find progress type', config.progressBar.type);\n  }\n};\n","// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst surveyData = require('./survey.json');\n\nexport const surveySchema = surveyData;\n","import { merge }                            from 'lodash';\nimport { isEnum, PAGE_TYPE, QUESTION_TYPE } from '../lib/enums';\nimport { IPageData }                        from '../survey/IPageData';\nimport { IQuestionData }                    from '../survey/IQuestionData';\nimport { surveySchema as survey }           from './index';\n\nconst schemaPart = {\n  properties: {\n    step: {\n      $ref:  '#/definitions/IStep',\n      title: 'Step',\n    },\n  },\n};\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst schemaFull: any = {\n  type: 'object',\n  ...schemaPart,\n  // eslint-disable-next-line dot-notation\n  ...survey,\n};\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const getStepSchema = (props: IQuestionData | IPageData): any => {\n  const schemaProps = { ...schemaPart };\n  if (isEnum(PAGE_TYPE, props.step.type)) {\n    schemaProps.properties.step.$ref = '#/definitions/IPage';\n  } else if (isEnum(QUESTION_TYPE, props.step.type)) {\n    schemaProps.properties.step.$ref = '#/definitions/IQuestion';\n  }\n  return merge(schemaProps, schemaFull);\n};\n","import { ReactNode }    from 'react';\nimport { IGlobalState } from '../../state/GlobalState';\nimport { IResult }      from '../../survey/IResult';\nimport { IStepData }    from '../../survey/IStepData';\n\n/**\n * Static utility methods for page components\n */\nexport abstract class Pages {\n  /**\n   * Internal method to compute reason for a result\n   * @param props\n   * @param result\n   * @returns\n   */\n  static getReason(props: IStepData, result: IResult, global: IGlobalState): string {\n    let reason                      = result.match?.explanation;\n    const { questionnaire, config } = global;\n\n    if (!reason) {\n      return '';\n    }\n\n    if (config?.dev && result.match) {\n      reason += '<br><br>';\n      if (\n        result.match.ageCalc !== undefined\n        || result.match.minAge !== undefined\n        || result.match.maxAge !== undefined\n      ) {\n        reason += `You are ${props.form.age?.years} years `;\n        reason += `and ${props.form.age?.months} months old. `;\n      }\n      Object.keys(result.match.responses).forEach((id) => {\n        const q = questionnaire.getQuestionById(id);\n        reason += `You answered \"<b>${q.answer}</b>\" to the question \"<i>${q.title}.</i>\" `;\n      });\n    }\n    return reason;\n  }\n\n  /**\n   * Internal method to generate list of results\n   * @param props\n   * @returns\n   */\n  static getResults(props: IStepData, global: IGlobalState): ReactNode {\n    const { questionnaire } = global;\n    return (questionnaire.getResults(props.form).map((result) => (\n      <li key={`${props.stepId}_${result.id}`} className=\"padding-bottom-2\">\n        <span>\n          {result.label}:{'  '}\n          <b>{result.name}</b>\n        </span>\n        <div\n          className=\"text-light\"\n          dangerouslySetInnerHTML={{ __html: Pages.getReason(props, result, global) }}\n        />\n      </li>\n    )));\n  }\n}\n","import { kebabCase, values }        from 'lodash';\nimport { QuestionableConfig }       from '../../composable/Config';\nimport { QUESTION_TYPE, STEP_TYPE } from '../../lib/enums';\nimport { Questionnaire }            from '../../composable/Questionnaire';\nimport { IForm }                    from '../../survey/IForm';\nimport { IStepData }                from '../../survey/IStepData';\nimport { IQuestionData }            from '../../survey/IQuestionData';\n\nexport abstract class Steps {\n  public static goToStep(step: string, props: IStepData): void {\n    props.wizard.goToStep(step);\n  }\n\n  public static goToNextStep(\n    props: IStepData,\n    questionnaire: Questionnaire,\n    config: QuestionableConfig,\n  ): void {\n    Steps.goToStep(questionnaire.getNextStep(props, config), props);\n  }\n\n  public static goToPrevStep(\n    props: IStepData,\n    questionnaire: Questionnaire,\n    config: QuestionableConfig,\n  ): void {\n    Steps.goToStep(questionnaire.getPreviousStep(props, config), props);\n  }\n\n  /**\n   * Determines whether the user should be allowed to continue\n   * @param props\n   * @returns\n   */\n  public static isNextEnabled(props: IStepData): boolean {\n    if (!props?.step) throw new Error('This survery is not defined');\n\n    if (props.stepId === STEP_TYPE.LANDING) return true;\n\n    if (props.stepId === STEP_TYPE.SUMMARY) return true;\n\n    if (!props.form) return false;\n    // KLUDGE Alert: this is not an elegant way to solve this\n    if (props.step?.type === QUESTION_TYPE.DOB) {\n      return undefined !== props.form?.age?.years && props.form.age.years >= 0;\n    }\n    return Steps.isValid(props.form, props.step.id);\n  }\n\n  public static isValid(form: IForm, questionId: string): boolean {\n    const q = form.responses.find((a) => a.id === questionId);\n    if (!q) return false;\n    const answers = values(q.answers);\n    switch (q.type) {\n      case STEP_TYPE.DOB:\n        return undefined !== form?.age?.years && form.age.years > 0;\n      case STEP_TYPE.MULTIPLE_CHOICE:\n        return q.answer !== undefined && answers?.find((x) => x.title === q.answer) !== undefined;\n      default:\n        return true;\n    }\n  }\n\n  public static getFieldSetName(props: IQuestionData): string {\n    return kebabCase(props.step.title);\n  }\n\n  public static getDomId(answer: string, props: IQuestionData): string {\n    const name = Steps.getFieldSetName(props);\n    return `${name}-${kebabCase(answer)}`;\n  }\n}\n","/* eslint-disable no-param-reassign */\nimport { Checkbox, Fieldset, Radio } from '@trussworks/react-uswds';\nimport { DateTime }                  from 'luxon';\nimport { ACTION_TYPE, CSS_CLASS }    from '../../lib/enums';\nimport { IQuestionData }             from '../../survey/IQuestionData';\nimport { Steps }                     from './Steps';\nimport { getDateTime }               from '../../lib/date';\nimport { TDateOfBirth }              from '../../lib/types';\nimport { IQuestionableConfig }       from '../../survey/IQuestionableConfig';\nimport { IQuestionAnswer }           from '../../survey/IQuestionAnswer';\n\n/**\n * Static utility methods for question components\n */\nexport abstract class Questions {\n  /**\n   * Updates the form with the current selected answer(s)\n   * @param answer\n   * @param props\n   * @returns\n   */\n  private static updateForm(answer: string, props: IQuestionData): void {\n    Object.assign(props.step, { answer });\n    const value = {\n      answers: [props.step],\n    };\n    return props.dispatchForm({\n      type: ACTION_TYPE.UPDATE,\n      value,\n    });\n  }\n\n  /**\n   * Determines if the answer is valid and selected\n   * @param answer\n   * @param props\n   * @returns\n   */\n  private static isSelected(answer: string, props: IQuestionData): boolean | undefined {\n    if (!props?.form) {\n      return undefined;\n    }\n    const q = props.form.responses.find((a) => a.id === props.step.id);\n    if (!q) {\n      return undefined;\n    }\n    return Steps.isValid(props.form, props.step.id) && q.answer === answer;\n  }\n\n  /**\n   * Generates a radio button given a question definition\n   * @param answer\n   * @param props\n   * @returns\n   */\n  private static getRadio(\n    answer: IQuestionAnswer,\n    props: IQuestionData,\n    config: IQuestionableConfig,\n  ): JSX.Element {\n    const handler = () => Questions.updateForm(answer.title, props);\n    const id      = Steps.getDomId(answer.title, props);\n\n    return (\n      <Radio\n        id={id}\n        key={id}\n        name={Steps.getFieldSetName(props)}\n        label={answer.title}\n        value={answer.title}\n        checked={Questions.isSelected(answer.title, props) === true}\n        className={CSS_CLASS.MULTI_CHOICE}\n        onChange={handler}\n        onClick={handler}\n        tile={config.questions?.showAnswerBorder === true}\n      />\n    );\n  }\n\n  /**\n   * Gets a collection of radio buttons\n   * @param props\n   * @returns\n   */\n  public static getRadios(props: IQuestionData, config: IQuestionableConfig): JSX.Element {\n    return (<Fieldset\n      legend={props.step.title}\n      className={CSS_CLASS.MULTI_CHOICE_GROUP}\n      legendStyle=\"srOnly\"\n    >\n      {\n        props.step.answers.map((a) =>\n          Questions.getRadio(a, props, config))\n      }\n    </Fieldset>);\n  }\n\n  /**\n   * Generates a checkbox given a question definition\n   * @param answer\n   * @param props\n   * @returns\n   */\n  private static getCheckbox(\n    answer: IQuestionAnswer,\n    props: IQuestionData,\n    config: IQuestionableConfig,\n  ): JSX.Element {\n    const handler = () => Questions.updateForm(answer.title, props);\n    const id      = Steps.getDomId(answer.title, props);\n\n    return (\n      <Checkbox\n        id={id}\n        key={id}\n        name={Steps.getFieldSetName(props)}\n        label={answer.title}\n        value={answer.title}\n        checked={Questions.isSelected(answer.title, props) === true}\n        className={CSS_CLASS.MULTI_SELECT}\n        onChange={handler}\n        onClick={handler}\n        tile={config.questions?.showAnswerBorder === true}\n      />\n    );\n  }\n\n  /**\n * Gets a collection of checkboxes\n * @param props\n * @returns\n */\n  public static getCheckboxes(props: IQuestionData, config: IQuestionableConfig): JSX.Element {\n    return (\n      <Fieldset\n        legend={props.step.title}\n        className={CSS_CLASS.MULTI_SELECT_GROUP}\n        legendStyle=\"srOnly\"\n      >\n      {\n        props.step.answers.map((a) => Questions.getCheckbox(a, props, config))\n      }\n      </Fieldset>\n    );\n  }\n\n  /**\n   * Gets a birthdate's DateTime from a form\n   * @param props\n   * @returns\n   */\n  public static getBirthdate(props: IQuestionData): DateTime | undefined {\n    if (props.form?.birthdate) {\n      return getDateTime(props.form.birthdate);\n    }\n    return undefined;\n  }\n\n  /**\n   * Converts a Date of Birth type into a string\n   * @param dob\n   * @returns\n   */\n  public static toBirthdate(dob: TDateOfBirth): string | undefined {\n    if (dob.month && dob.day && dob.year) {\n      return `${dob.month.padStart(2, '0')}/${dob.day.padStart(2, '0')}/${\n        dob.year\n      }`;\n    }\n    return undefined;\n  }\n}\n","import { Button as B } from '@trussworks/react-uswds';\nimport {\n  CSS_CLASS,\n  MODE,\n  STEP_TYPE,\n  TButtonMode,\n  TVerticalPosition,\n} from '../../lib';\nimport { noel }      from '../../lib/noop';\nimport { useGlobal } from '../../state/GlobalState';\nimport { IStepData } from '../../survey/IStepData';\nimport { Steps }     from '../lib/Steps';\n\ntype TButtonConfig = {\n  dir: 'next' | 'prev';\n  disabled: () => boolean;\n  label: string;\n  mode: TButtonMode;\n  onClick: () => void,\n  stepId: string;\n}\n\nconst Button = (props: TButtonConfig): JSX.Element => (\n  <B\n    className={`${CSS_CLASS.NAVBAR_BUTTON} ${CSS_CLASS.NAVBAR_BUTTON}-${props.dir}`}\n    data-testid={`${props.dir}-button-${props.stepId}`}\n    disabled={props.disabled()}\n    onClick={props.onClick}\n    type=\"button\"\n    unstyled={props.mode === 'link'}\n    outline={props.mode !== 'link' && props.dir === 'prev'}\n  >\n    {props.label}\n  </B>\n);\n\ninterface INavBar extends IStepData {\n  verticalPos: TVerticalPosition;\n}\n\nexport const PreviousButton = (props: INavBar): JSX.Element => {\n  const { questionnaire, config } = useGlobal();\n\n  const { step }       = props;\n  const layoutMismatch = props.verticalPos !== config.nav.prev.verticalPos;\n  const surveyStart    = props.stepId === STEP_TYPE.LANDING\n    || props.stepId === questionnaire.flow[1];\n  const surveyEnd      = props.stepId === STEP_TYPE.RESULTS\n    || props.stepId === STEP_TYPE.NO_RESULTS;\n  const notEditMode    = config.mode !== MODE.EDIT\n    || (props.stepId === questionnaire.flow[0]\n    && config.mode === MODE.EDIT);\n  const doNotRender    = layoutMismatch\n    || ((surveyStart || surveyEnd)\n    && notEditMode);\n\n  if (doNotRender) {\n    return noel();\n  }\n\n  const label    = step?.buttons?.prev?.label || config.nav.prev.defaultLabel || 'Previous';\n  const onClick  = () => Steps.goToPrevStep(props, questionnaire, config);\n  const disabled = () => false;\n\n  return (\n    <Button {...\n      {\n        dir:    'prev',\n        disabled,\n        label,\n        mode:   config.nav.prev.mode || 'link',\n        onClick,\n        stepId: `${props.stepId}`,\n      }\n    }/>\n  );\n};\n\nexport const NextButton = (props: INavBar): JSX.Element => {\n  const { questionnaire, config } = useGlobal();\n  const { step }                  = props;\n  const layoutMismatch            = props.verticalPos !== config.nav.next.verticalPos;\n  const surveyEnd                 = props.stepId === STEP_TYPE.RESULTS\n    || props.stepId === STEP_TYPE.NO_RESULTS;\n  const notEditMode               = config.mode !== MODE.EDIT\n    || (props.stepId === questionnaire.flow[questionnaire.flow.length - 1]\n      && config.mode === MODE.EDIT);\n  const doNotRender               = layoutMismatch\n    || ((surveyEnd) && notEditMode);\n\n  if (doNotRender) {\n    return noel();\n  }\n\n  const label    = step?.buttons?.next?.label || config.nav.next.defaultLabel || 'Previous';\n  const onClick  = () => Steps.goToNextStep(props, questionnaire, config);\n  const disabled = () => config.mode === MODE.VIEW && !Steps.isNextEnabled(props);\n\n  return (\n    <Button {...\n      {\n        dir:    'next',\n        disabled,\n        label,\n        mode:   config.nav.next.mode || 'button',\n        onClick,\n        stepId: `${props.stepId}`,\n      }\n    }/>\n  );\n};\n","import { NextButton, PreviousButton } from './Button';\nimport { TVerticalPosition }          from '../../lib';\nimport { CSS_CLASS }                  from '../../lib/enums';\nimport { IStepData }                  from '../../survey/IStepData';\n\ninterface INavBar extends IStepData {\n  verticalPos: TVerticalPosition;\n}\n\n/**\n * Generates the Previous/Next buttons for Wizard navigation\n * @param props\n * @returns\n */\nexport const NavBar = (props: INavBar): JSX.Element => (\n  <nav className={`${CSS_CLASS.NAVBAR} ${CSS_CLASS.NAVBAR}-${props.verticalPos}`}>\n    <PreviousButton {...props} />\n    <NextButton {...props} />\n  </nav>\n);\n","import {\n  Card, CardBody, CardFooter, CardGroup, CardHeader,\n} from '@trussworks/react-uswds';\nimport { IStepData } from '../../survey/IStepData';\nimport { NavBar }    from './NavBar';\nimport { useGlobal } from '../../state/GlobalState';\n\n/**\n * Generates the Card layout for each step's contents\n * @param props\n * @returns\n */\nexport const DesignLayout = (props: IStepData): JSX.Element => {\n  const { questionnaire } = useGlobal();\n\n  return (\n    <div>\n      <NavBar {...{ ...props, verticalPos: 'top' }} />\n      <section>\n        <CardGroup>\n          <Card\n            headerFirst\n            gridLayout={{ tablet: { col: 12 } }}\n            containerProps={{ className: 'border-ink' }}\n          >\n            <CardHeader className=\"bg-base-lightest\">\n              <h1>Edit the {questionnaire.header}</h1>\n            </CardHeader>\n            <CardBody className=\"padding-top-3\">{props.children}</CardBody>\n            <CardFooter>\n              {'Click \"Save\" to save your edits, or \"Next\" to continue editing'}\n            </CardFooter>\n          </Card>\n        </CardGroup>\n      </section>\n    </div>\n  );\n};\n","import Form              from '@rjsf/semantic-ui';\nimport { Button }        from '@trussworks/react-uswds';\nimport { kebabCase }     from 'lodash';\nimport { getStepSchema } from '../../schema/editStepSchema';\nimport { useGlobal }     from '../../state/GlobalState';\nimport { IPageData }     from '../../survey/IPageData';\nimport { IQuestionData } from '../../survey/IQuestionData';\nimport { Wizard }        from '../lib';\nimport { DesignLayout }  from '../wizard/DesignLayout';\n\n/**\n * Renders a question and a radio list of allowed answers\n * @param props\n * @returns\n */\nexport const Edit = (props: IQuestionData | IPageData): JSX.Element => {\n  const { questionnaire } = useGlobal();\n  const schema            = getStepSchema(props);\n  const fileName          = kebabCase(questionnaire.header);\n\n  /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n  const onSubmit = ({ formData }: any) => {\n    Wizard.saveAsJson(formData, `${fileName}.json`);\n  };\n  return (\n    <Form\n      schema={schema}\n      uiSchema={{\n        step: {\n          'ui:order': [\n            'title',\n            'subTitle',\n            'bodyHeader',\n            'bodySubHeader',\n            'body',\n            'info',\n            'footer',\n            '*',\n          ],\n        },\n      }}\n      onSubmit={onSubmit}\n      formData={{ step: props.step }}\n    >\n      <div>\n        <Button type=\"submit\">Save</Button>\n      </div>\n    </Form>\n  );\n};\n\n/**\n * Renders a question and a radio list of allowed answers\n * @param props\n * @returns\n */\nexport const EditStep = (props: IQuestionData | IPageData): JSX.Element => (\n  <DesignLayout {...props}>\n    <Edit {...props} />\n  </DesignLayout>\n);\n","import {\n  Card, CardBody, CardFooter, CardGroup, CardHeader,\n} from '@trussworks/react-uswds';\nimport { IStepData } from '../../survey/IStepData';\nimport { NavBar }    from './NavBar';\nimport { Wizard }    from '../lib/Wizard';\nimport { useGlobal } from '../../state/GlobalState';\nimport { CSS_CLASS } from '../../lib';\n\n/**\n * Generates the Card layout for each step's contents\n * @param props\n * @returns\n */\nexport const StepLayout = (props: IStepData): JSX.Element => {\n  const { config }                  = useGlobal();\n  const { borderClass, titleClass } = config.steps;\n\n  return (\n    <div>\n      <NavBar {...{ ...props, verticalPos: 'top' }} />\n      <section className={CSS_CLASS.STEP_LAYOUT}>\n        <CardGroup>\n          <Card\n            headerFirst\n            gridLayout={{ tablet: { col: 12 } }}\n            containerProps={{ className: borderClass }}\n          >\n            <CardHeader className={titleClass}>\n              {Wizard.getHeader(props, config)}\n            </CardHeader>\n            <CardBody>\n              {Wizard.getSubtitle(props)}\n              {props.children}\n              {Wizard.getInfoBox(props)}\n            </CardBody>\n            <CardFooter>\n              {Wizard.getFooter(props)}\n            </CardFooter>\n          </Card>\n        </CardGroup>\n      </section>\n      <NavBar {...{ ...props, verticalPos: 'bottom' }} />\n    </div>\n  );\n};\n","import { noel }       from '../../lib/noop';\nimport { IPageData }  from '../../survey/IPageData';\nimport { StepLayout } from '../wizard/StepLayout';\n\n/**\n * Generates the first/initial/landing page of the Wizard\n * @param props\n * @returns\n */\nexport const LandingPage = (props: IPageData): JSX.Element => {\n  const { step } = props;\n  if (!step) {\n    return noel();\n  }\n\n  return (\n    <StepLayout {...props}>\n      <p>{step.body}</p>\n    </StepLayout>\n  );\n};\n","import { noel }       from '../../lib/noop';\nimport { IPageData }  from '../../survey/IPageData';\nimport { StepLayout } from '../wizard/StepLayout';\n\n/**\n * Displays the wizard results\n * @param props\n * @returns\n */\nexport const NoResultsPage = (props: IPageData): JSX.Element => {\n  const { step: page } = props;\n  if (!page) {\n    return noel();\n  }\n\n  return (\n    <StepLayout {...props}>\n    </StepLayout>\n  );\n};\n","import { SummaryBox } from '@trussworks/react-uswds';\nimport { IPageData }  from '../../survey/IPageData';\nimport { StepLayout } from '../wizard/StepLayout';\nimport { Pages }      from '../lib';\nimport { useGlobal }  from '../../state/GlobalState';\nimport { noel }       from '../../lib/noop';\nimport { CSS_CLASS }  from '../../lib';\n\n/**\n * Displays the wizard results\n * @param props\n * @returns\n */\nexport const ResultsPage = (props: IPageData): JSX.Element => {\n  const { step }          = props;\n  const global            = useGlobal();\n  const { questionnaire } = global;\n\n  if (!step) {\n    return noel();\n  }\n\n  const action = questionnaire.getAction();\n\n  return (\n    <StepLayout {...props}>\n      <SummaryBox heading={step.bodyHeader || ''} className={CSS_CLASS.RESULTS_SUMMARY_HEADER}>\n        <p>{step.bodySubHeader}</p>\n        <ul\n          className={`usa-list usa-list--unstyled ${CSS_CLASS.RESULTS_SUMMARY_BOX}`}\n        >\n          {Pages.getResults(props, global)}\n        </ul>\n        <p dangerouslySetInnerHTML={{ __html: step?.body || '' }} />\n        <h2>{action.title}</h2>\n        <p>{action.description}</p>\n        <p dangerouslySetInnerHTML={{ __html: action.action }} />.\n      </SummaryBox>\n    </StepLayout>\n  );\n};\n","import { ReactNode }  from 'react';\nimport { noel }       from '../../lib/noop';\nimport { IPageData }  from '../../survey/IPageData';\nimport { StepLayout } from '../wizard/StepLayout';\n\n/**\n * Internal method to generate a list of the survey answers\n * @param props\n * @returns\n */\nconst getAnswers = (props: IPageData): ReactNode => {\n  const answers = props.form.responses.map((question) => (\n      <li key={question.id} className=\"padding-bottom-2\">\n        <span className=\"text-light\">\n          {question.title}:&nbsp;&nbsp;\n          <b>{question.answer}</b>\n        </span>\n      </li>\n  ));\n\n  return <ul className=\"usa-list usa-list--unstyled\">{answers}</ul>;\n};\n\n/**\n * Displays a summary of the wizard prior to showing results\n * @param props\n * @returns\n */\nexport const SummaryPage = (props: IPageData): JSX.Element => {\n  const { step: page } = props;\n  if (!page) {\n    return noel();\n  }\n\n  return <StepLayout {...props}>{getAnswers(props)}</StepLayout>;\n};\n","import { DateInput, DateInputGroup } from '@trussworks/react-uswds';\nimport { capitalize }                from 'lodash';\nimport { ChangeEvent, useState }     from 'react';\nimport { getAge }                    from '../../lib/date';\nimport { ACTION_TYPE, DATE_UNIT }    from '../../lib/enums';\nimport { noel }                      from '../../lib/noop';\nimport { TDateOfBirth }              from '../../lib/types';\nimport { IQuestionData }             from '../../survey/IQuestionData';\nimport { Questions }                 from '../lib/Questions';\nimport { Steps }                     from '../lib/Steps';\nimport { StepLayout }                from '../wizard/StepLayout';\n\nexport const DateOfBirth = (props: IQuestionData): JSX.Element => {\n  const { step }          = props;\n  const dob: TDateOfBirth = {\n    day:   Questions.getBirthdate(props)?.day?.toString(),\n    month: Questions.getBirthdate(props)?.month?.toString(),\n    year:  Questions.getBirthdate(props)?.year?.toString(),\n  };\n  const [state, setState] = useState(dob);\n\n  if (!step) {\n    return noel();\n  }\n\n  const onDateOfBirthChange = (\n    e: ChangeEvent<HTMLInputElement>,\n    unit: DATE_UNIT,\n  ): void => {\n    const val = e.target.value;\n    if (!val) {\n      return;\n    }\n    state[unit] = val;\n    setState({\n      ...state,\n    });\n    const bd  = Questions.toBirthdate(state);\n    const age = getAge(bd);\n    if (age) {\n      props.dispatchForm({\n        type:  ACTION_TYPE.UPDATE,\n        value: {\n          age,\n          birthdate: bd,\n        },\n      });\n    }\n  };\n\n  const getDateInput = (\n    unit: DATE_UNIT,\n    label: string,\n  ): JSX.Element => {\n    let length = 2;\n    if (unit === DATE_UNIT.YEAR) {\n      length = 4;\n    }\n    return (\n      <DateInput\n        id={Steps.getDomId(unit, props)}\n        name={label}\n        label={capitalize(unit)}\n        unit={unit}\n        maxLength={length}\n        minLength={length}\n        defaultValue={state[unit]}\n        onChange={(e) => onDateOfBirthChange(e, unit)}\n      />);\n  };\n\n  const getDateInputGroup = (label: string): JSX.Element => (\n    <DateInputGroup>\n      {getDateInput(DATE_UNIT.MONTH, label)}\n      {getDateInput(DATE_UNIT.DAY, label)}\n      {getDateInput(DATE_UNIT.YEAR, label)}\n    </DateInputGroup>\n  );\n\n  return getDateInputGroup('date_of_birth');\n};\n\nexport const DateOfBirthStep = (props: IQuestionData): JSX.Element => (\n  <StepLayout {...props}>\n    <DateOfBirth {...props} />\n  </StepLayout>\n);\n","import { noel }          from '../../lib/noop';\nimport { useGlobal }     from '../../state/GlobalState';\nimport { IQuestionData } from '../../survey/IQuestionData';\nimport { Questions }     from '../lib/Questions';\nimport { StepLayout }    from '../wizard/StepLayout';\n\n/**\n * Renders a question and a checkbox list of allowed answers\n * @param props\n * @returns\n */\nexport const MultipleSelect = (props: IQuestionData): JSX.Element => {\n  const { config } = useGlobal();\n\n  if (props?.step?.answers === undefined) {\n    return noel();\n  }\n\n  return Questions.getCheckboxes(props, config);\n};\n\n/**\n * Renders a question and a checkbox list of allowed answers\n * @param props\n * @returns\n */\nexport const MultipleSelectStep = (props: IQuestionData): JSX.Element => (\n  <StepLayout {...props}>\n    <MultipleSelect {...props} />\n  </StepLayout>\n);\n","import { noel }          from '../../lib/noop';\nimport { useGlobal }     from '../../state';\nimport { IQuestionData } from '../../survey/IQuestionData';\nimport { Questions }     from '../lib/Questions';\nimport { StepLayout }    from '../wizard/StepLayout';\n\n/**\n * Renders a question and a radio list of allowed answers\n * @param props\n * @returns\n */\nexport const MultipleChoice = (props: IQuestionData): JSX.Element => {\n  const { config } = useGlobal();\n\n  if (props?.step?.answers === undefined) {\n    return noel('Question and answer are not defined');\n  }\n\n  return Questions.getRadios(props, config);\n};\n\n/**\n * Renders a question and a radio list of allowed answers\n * @param props\n * @returns\n */\nexport const MultipleChoiceStep = (props: IQuestionData): JSX.Element => (\n  <StepLayout {...props}>\n    <MultipleChoice {...props} />\n  </StepLayout>\n);\n","import {\n  isEnum, QUESTION_TYPE,\n} from '../../lib/enums';\nimport { noel }          from '../../lib/noop';\nimport { useGlobal }     from '../../state/GlobalState';\nimport { IStepData }     from '../../survey/IStepData';\nimport { IQuestionData } from '../../survey/IQuestionData';\nimport {\n  DateOfBirthStep,\n  MultipleChoiceStep,\n  MultipleSelectStep,\n} from '../questions';\n\n/**\n * Given a step of a known question type, generates a question component\n * @param props\n * @returns\n */\nexport const QuestionFactory = (props: IStepData): JSX.Element => {\n  const { stepId }        = props;\n  const { questionnaire } = useGlobal();\n  const step              = questionnaire.getStepById(`${stepId}`);\n\n  if (!isEnum(QUESTION_TYPE, step.type)) {\n    return noel('Not a question');\n  }\n  const question = questionnaire.getQuestionById(step.id);\n  const stepData = { ...{ step: question, ...props } } as IQuestionData;\n  switch (question.type) {\n    case QUESTION_TYPE.DOB:\n      return <DateOfBirthStep {...stepData} />;\n    case QUESTION_TYPE.MULTIPLE_CHOICE:\n      return <MultipleChoiceStep {...stepData} />;\n    case QUESTION_TYPE.MULTIPLE_SELECT:\n      return <MultipleSelectStep {...stepData} />;\n    default:\n      return noel('Question does not exist', 'QuestionFactory');\n  }\n};\n","import {\n  isEnum, MODE, PAGE_TYPE, QUESTION_TYPE,\n} from '../../lib/enums';\nimport { noel }            from '../../lib/noop';\nimport { useGlobal }       from '../../state/GlobalState';\nimport { IStep }           from '../../survey/IStep';\nimport { IStepData }       from '../../survey/IStepData';\nimport { DesignFactory }   from './DesignFactory';\nimport { PageFactory }     from './PageFactory';\nimport { QuestionFactory } from './QuestionFactory';\n\nconst viewFactory = (props: IStepData, step: IStep): JSX.Element => {\n  if (isEnum(QUESTION_TYPE, step.type)) {\n    return QuestionFactory(props);\n  }\n  if (isEnum(PAGE_TYPE, step.type)) {\n    return PageFactory(props);\n  }\n  return noel('Step does not exist', 'StepFactory');\n};\n\n/**\n * Core UI factory for generating steps\n * @param props\n * @returns\n */\nexport const StepFactory = (props: IStepData): JSX.Element => {\n  const { stepId }                = props;\n  const { questionnaire, config } = useGlobal();\n  const step                      = questionnaire.getStepById(`${stepId}`);\n\n  if (config.mode === MODE.EDIT) {\n    return DesignFactory(props, step);\n  }\n  return viewFactory(props, step);\n};\n","import {\n  isEnum, PAGE_TYPE,\n} from '../../lib/enums';\nimport { noel }      from '../../lib/noop';\nimport { useGlobal } from '../../state/GlobalState';\nimport { IStepData } from '../../survey/IStepData';\nimport { IPageData } from '../../survey/IPageData';\nimport {\n  LandingPage,\n  NoResultsPage,\n  ResultsPage,\n  SummaryPage,\n} from '../pages';\n\n/**\n * Given a step of a known page type, returns a page component\n * @param props\n * @returns\n */\nexport const PageFactory = (props: IStepData): JSX.Element => {\n  const { stepId }        = props;\n  const { questionnaire } = useGlobal();\n  const step              = questionnaire.getStepById(`${stepId}`);\n  if (!isEnum(PAGE_TYPE, step.type)) {\n    return noel('Not a page');\n  }\n  const page     = questionnaire.getPageById(step.id);\n  const stepData = { ...{ step: page, ...props } } as IPageData;\n  switch (page.type) {\n    case PAGE_TYPE.LANDING:\n      return <LandingPage {...stepData} />;\n    case PAGE_TYPE.NO_RESULTS:\n      return <NoResultsPage {...stepData} />;\n    case PAGE_TYPE.RESULTS:\n      return <ResultsPage {...stepData} />;\n    case PAGE_TYPE.SUMMARY:\n      return <SummaryPage {...stepData} />;\n    default:\n      return noel('Page does not exist', 'PageFactory');\n  }\n};\n","import { isEnum, PAGE_TYPE, QUESTION_TYPE } from '../../lib/enums';\nimport { noel }                             from '../../lib/noop';\nimport { useGlobal }                        from '../../state/GlobalState';\nimport { IStep }                            from '../../survey/IStep';\nimport { IStepData }                        from '../../survey/IStepData';\nimport { IPageData }                        from '../../survey/IPageData';\nimport { IQuestionData }                    from '../../survey/IQuestionData';\nimport { EditStep }                         from '../design/Edit';\n/**\n * Given a step of a known question type, generates a question component\n * @param props\n * @returns\n */\nexport const DesignFactory = (props: IStepData, step: IStep): JSX.Element => {\n  const { questionnaire }   = useGlobal();\n  const question            = questionnaire.getStepById(step.id);\n  const stepData: IStepData = { ...{ step: question, ...props } };\n\n  if (isEnum(QUESTION_TYPE, step.type)) {\n    const questionData = stepData as IQuestionData;\n    return <EditStep {...questionData}></EditStep>;\n  }\n  if (isEnum(PAGE_TYPE, step.type)) {\n    const pageData = stepData as IPageData;\n    return <EditStep {...pageData}></EditStep>;\n  }\n  return noel('Not an editable type');\n};\n","import { useReducer }                         from 'react';\nimport { useWizard }                          from 'use-wizard';\nimport { Answer }                             from '../composable/Answer';\nimport { GlobalStateProvider, IQuestionable } from '../state/GlobalState';\nimport { stepReducer }                        from '../state/stepReducer';\nimport { DevPanel }                           from './wizard/DevPanel';\nimport { ProgressFactory }                    from './factories/ProgressFactory';\nimport { StepFactory }                        from './factories/StepFactory';\nimport { CSS_CLASS }                          from '../lib/enums';\n\nexport const Questionable = (q: IQuestionable): JSX.Element => {\n  const { questionnaire } = q;\n  if (!questionnaire) {\n    throw new Error('questionable is undefined');\n  }\n\n  const [step, wizard] = useWizard(questionnaire.flow);\n\n  // This is only used to store user inputs\n  const [form, dispatchForm] = useReducer(stepReducer, new Answer());\n  return (\n    <GlobalStateProvider value={q}>\n      <div className={CSS_CLASS.BASE}>\n        <section className={`section ${CSS_CLASS.PROGRESS_BAR_TOP_SECTION}`}>\n          <ProgressFactory {...{\n            position: 'top',\n            props:    {\n              dispatchForm,\n              form,\n              stepId: step,\n              wizard,\n            },\n          }}/>\n        </section>\n\n        <section className={`section ${CSS_CLASS.STEP_LAYOUT_SECTION}`}>\n          <StepFactory\n            {...{\n              dispatchForm,\n              form,\n              stepId: step,\n              wizard,\n            }}\n          />\n        </section>\n\n        <section className={`section ${CSS_CLASS.PROGRESS_BAR_BOTTOM_SECTION}`}>\n          <ProgressFactory {...{\n            position: 'bottom',\n            props:    {\n              dispatchForm,\n              form,\n              stepId: step,\n              wizard,\n            },\n          }}/>\n        </section>\n\n        <section className={`section ${CSS_CLASS.DEV_PANEL_SECTION}`}>\n          <DevPanel\n            {...{\n              dispatchForm,\n              form,\n              stepId: step,\n              wizard,\n            }}\n          />\n        </section>\n      </div>\n    </GlobalStateProvider>\n  );\n};\n"],"names":["_arrayLikeToArray","arr","len","length","i","arr2","Array","_slicedToArray","isArray","arrayWithHoles","_i","Symbol","iterator","_s","_e","_arr","_n","_d","call","next","done","push","value","err","iterableToArrayLimit","o","minLen","arrayLikeToArray","n","Object","prototype","toString","slice","constructor","name","from","test","unsupportedIterableToArray","TypeError","nonIterableRest","_classCallCheck","instance","Constructor","_defineProperty","obj","key","defineProperty","enumerable","configurable","writable","QUESTION_TYPE","PAGE_TYPE","DESIGN_TYPE","Answer","form","assign","this","started","Date","GlobalStateContext","createContext","setState","state","useGlobalState","context","useContext","Error","GlobalStateProvider","children","useState","_jsx","Provider","useQuestionnaire","questionnaire","useConfig","config","useGlobal","DIRECTION","PROGRESS_BAR_STATUS","ACTION","ACTION_TYPE","DATE_UNIT","MODE","CSS_CLASS","STEP_TYPE","isEnum","enm","values","includes","stepReducer","previousState","action","type","RESET","UPDATE","merge","moment","require","isValidDate","dt","isValid","getDateTime","date","substring","DateTime","fromJSDate","getAge","dateOfBirth","dob","now","yearNow","year","monthNow","month","dateNow","day","yearDob","monthDob","dateDob","years","months","days","getDateTimeAge","_defineProperties","target","props","descriptor","_createClass","protoProps","staticProps","LANDING","RESULTS","NO_RESULTS","SUMMARY","log","params","console","noel","message","_Fragment","Wizard","text","step","_props$step","title","steps","showStepId","_props$step2","id","className","STEP_HEADER","_props$step3","subTitle","STEP_SUBTITLE","dangerouslySetInnerHTML","__html","_props$step4","info","SiteAlert","variant","showIcon","STEP_INFO","_props$step5","footer","STEP_FOOTER","dispatchForm","wizard","goToStep","data","fileName","blob","Blob","FileSaver","saveAs","DevPanel","dev","_jsxs","Accordion","items","content","JSON","stringify","expanded","NAVBAR","Button","secondary","onClick","resetQuestionable","ProgressBar","progressBar","hide","completed","getProgressPercent","PROGRESS_BAR","PB","bgColor","baseBgColor","isLabelVisible","borderRadius","getIndicatorStep","s","StepIndicatorStep","label","status","StepIndicator","sections","getSections","SI","centered","counters","map","ProgressFactory","position","surveySchema","schemaPart","properties","$ref","schemaFull","survey","Pages","result","global","reason","match","_result$match","explanation","undefined","ageCalc","minAge","maxAge","age","_props$form$age","_props$form$age2","keys","responses","forEach","q","getQuestionById","answer","getResults","getReason","stepId","Steps","getNextStep","getPreviousStep","DOB","_props$form","questionId","find","a","answers","_form$age","MULTIPLE_CHOICE","x","kebabCase","getFieldSetName","Questions","handler","updateForm","getDomId","Radio","checked","isSelected","MULTI_CHOICE","onChange","tile","questions","showAnswerBorder","Fieldset","legend","MULTI_CHOICE_GROUP","legendStyle","getRadio","Checkbox","MULTI_SELECT","MULTI_SELECT_GROUP","getCheckbox","birthdate","padStart","B","NAVBAR_BUTTON","dir","disabled","unstyled","mode","outline","PreviousButton","layoutMismatch","verticalPos","nav","prev","surveyStart","flow","surveyEnd","notEditMode","EDIT","buttons","defaultLabel","goToPrevStep","NextButton","VIEW","isNextEnabled","goToNextStep","NavBar","DesignLayout","CardGroup","Card","headerFirst","gridLayout","tablet","col","containerProps","CardHeader","header","CardBody","CardFooter","Edit","schema","schemaProps","getStepSchema","Form","uiSchema","onSubmit","formData","saveAsJson","EditStep","StepLayout","borderClass","titleClass","STEP_LAYOUT","getHeader","getSubtitle","getInfoBox","getFooter","LandingPage","body","NoResultsPage","ResultsPage","getAction","SummaryBox","heading","bodyHeader","RESULTS_SUMMARY_HEADER","bodySubHeader","RESULTS_SUMMARY_BOX","description","getAnswers","question","SummaryPage","DateOfBirth","getBirthdate","_Questions$getBirthda","_Questions$getBirthda2","_Questions$getBirthda3","_Questions$getBirthda4","_Questions$getBirthda5","_Questions$getBirthda6","onDateOfBirthChange","e","unit","val","bd","toBirthdate","getDateInput","YEAR","DateInput","capitalize","maxLength","minLength","defaultValue","DateInputGroup","MONTH","DAY","DateOfBirthStep","MultipleSelect","getCheckboxes","MultipleSelectStep","MultipleChoice","getRadios","MultipleChoiceStep","viewFactory","getStepById","stepData","MULTIPLE_SELECT","QuestionFactory","page","getPageById","PageFactory","StepFactory","questionData","pageData","DesignFactory","useWizard","useReducer","BASE","PROGRESS_BAR_TOP_SECTION","STEP_LAYOUT_SECTION","PROGRESS_BAR_BOTTOM_SECTION","DEV_PANEL_SECTION"],"mappings":"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"}